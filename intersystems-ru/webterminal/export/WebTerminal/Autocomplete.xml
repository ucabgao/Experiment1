<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.1.1 (Build 505U)" ts="2015-12-21 13:52:31">
<Class name="WebTerminal.Autocomplete">
<Super>Common</Super>
<TimeChanged>63907,49852.728366</TimeChanged>
<TimeCreated>63906,49098.662696</TimeCreated>

<Method name="AutocompleteExists">
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit $get(^WebTerminal("Autocomplete", namespace)) '= ""
]]></Implementation>
</Method>

<Method name="GenerateAutocomplete">
<Description>
Generates autocomplete for namespace. Second parameter decides if
it will be regenerated again. But if namespace equals to "%" - generates
autocomplete for system classes. Make sure that autocomplete for
system classes generates one time and forever.
@param genSystem - Shows if system classes need to be generated. </Description>
<FormalSpec>namespace:%String,genSystem:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set trueNs = $case(genSystem, 1:"%", :namespace)

    do ..SendData("29", ..#ClientOutputLocalized)
    do ..SendData(" " _ trueNs _ $C(13, 10))

    if ('##class(%SYS.Namespace).Exists(namespace)) {
        do ..SendData("30", ..#ClientOutputLocalized)
        do ..SendData(" " _ namespace _ $C(13, 10))
        quit $$$NOTOK
    }

    // get all classes names
    set result = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
    do result.Execute()

    /*
    The next COULD BE IMPROVED FOR SPEED, I beleive.
    Generates compressed JSON string of type:
    {
        "class": {
            "%ClassName1": {
                "methodName": 0,
                "propertyName": 0,
                "parameterName": 0,
                ...
            },
            "ClassName2": {
                ...
            }
        },
        "global": {
            "^%g1": 0,
            "^g2": 0
        }
    }
    */

    do ..SendData($C(13, 10))
    do ..SendData("32", ..#ClientOutputLocalized)

    set ac = "{""class"":{" // string with autocomplete
    set first = ""
    set u = 1

    while (result.Next()) { // forming autocomplete for each class

        if (genSystem) '= ($Extract(result.Data("Name"), 1) = "%") {
            continue
        }

        set className = result.Data("Name")

        do ..SendData($C(27) _ "[30G" _ u)
        s u = u + 1

        set ac = ac _ first _ """" _ className _ """:{"
        if (first = "") set first = ","

        set cdefs = ##class(%Dictionary.ClassDefinition).%OpenId(className)

        set countMethods = cdefs.Methods.Count()
        set countParameters = cdefs.Parameters.Count()
        set countProperties = cdefs.Properties.Count()
        set total = countMethods + countParameters + countProperties
        set current = 0

        for i=1:1:countMethods {
            set current = current + 1
            set ac = ac _ """" _ cdefs.Methods.GetAt(i).Name _ """:0"
            if (current'=total) set ac = ac _ ","
        }

        for i=1:1:countProperties {
            set current = current + 1
            set ac = ac _ """" _ cdefs.Properties.GetAt(i).Name _ """:0"
            if (current'=total) set ac = ac _ ","
        }

        for i=1:1:countParameters {
            set current = current + 1
            set ac = ac _ """" _ cdefs.Parameters.GetAt(i).Name _ """:0"
            if (current'=total) set ac = ac _ ","
        }

        set ac = ac _ "}"

    }

    set ac = ac _ "}"
    if ('genSystem) set ac = ac _ ",""global"":" _ ..getGlobalsJSON()
    set ac = ac _ "}"

    set ^WebTerminal("Autocomplete", trueNs) = ac

    do ..SendData($C(13, 10))
    do ..SendData("33", ..#ClientOutputLocalized)
    do ..SendData($C(13, 10))
    //do ..SendData(namespace, ..#ClientLoadAutocomplete)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="Reset">
<Description>
Returns terminal to default state</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // delete autocompletion files
    kill ^WebTerminal("Autocomplete")
    quit $$$OK
]]></Implementation>
</Method>

<Method name="getGlobalsJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

    set out = "{"
    set rset=##class(%ResultSet).%New("%SYS.GlobalQuery:NameSpaceList")
    set sc=rset.Execute($ZNSPACE,"*",0)
    while (rset.Next()) {
        set out = out _ """" _ $Piece(rset.GetData(1),"(",1) _ """:0,"
    }
    set out = $EXTRACT(out,1,$LENGTH(out)-1) _ "}"

    // todo:
    // Set Rset = ##class(%Library.ResultSet).%New("%SYS.GlobalQuery:NameSpaceListChui")
    // s Status=Rset.Execute(NameSpace,Mask,SystemGlobals,.UnavailableDatabases)

    q out
]]></Implementation>
</Method>
</Class>
</Export>
